ysimln.append(y0)
for i in range(1,N):
error=np.random.normal(0,sigma)
ysimln.append(phi0 + phi1 * ysimln[i-1] + error)
ysim = pd.DataFrame(lnmxx)
ysim['ysimln'] = ysimln
ysim
import matplotlib
from matplotlib.pyplot import *
clf()
plot(ysim['Adj Close'],color = 'r')
plot(ysim['ysimln'], color = 'b')
legend(['original log IPyC','Random wok with drift'],loc = 'upper left')
show()
ysim['IPyC'] =np.exp(ysim['Adj Close'])
ysim['simIPyC'] = np.exp(ysim['ysimln'])
clf()
plot(ysim['IPyC'],color = 'r')
plot(ysim['simIPyC'], color = 'b')
legend(['original IPyC','Random wok with drift'],loc = 'upper left')
show()
iaqro = pd.read_csv("iaqro.csv")
iaqro.shape
import pandas as pd
iaqro = pd.read_csv("iaqro.csv")
iaqro.shape
import pandas as pd
iaiqro = pd.read_csv("iaiqro.csv")
iaiqro.shape
iaiqro
plot(iaiqro['iaiqro])
title('Querétaro Industrial Activity')
show()
clf()
plot(iaiqro['iaiqro])
title('Querétaro Industrial Activity')
show()
clf()
plot(iaiqro['iaiqro'])
title('Querétaro Industrial Activity')
show()
iaiqro['logiaiqro'] = np.log(iaiqro['iaiqro'])
plot(iaiqro['logiaiqro'])
title('Log of Querétaro Industrial Activity')
show()
iaiqro['logiaiqro'] = np.log(iaiqro['iaiqro'])
clf()
plot(iaiqro['logiaiqro'])
title('Log of Querétaro Industrial Activity')
show()
iaiqro['anngrowth'] = iaiqro['logiaiqro'] - iaiqro['logiaiqro'].shift(12)
clf()
plot(iaiqro['anngrowth'])
title('Annual growth of Qro industrial activity')
show()
from statsmodels.tsa.stattools import adfuller
adfuller(aiqro['anngrowth'])
from statsmodels.tsa.stattools import adfuller
adfuller(iaiqro['anngrowth'])
from statsmodels.tsa.stattools import adfuller
test1 = adfuller(iaiqro['anngrowth'])
print(test1)
test1 = adfuller(iaiqro['anngrowth'])
iaiqro.index
type(iaiqro)
import pandas as pd
iaiqro = pd.read_csv("iaiqro.csv")
iaiqro = iaiqro.sort_values(by='Periodos').reset_index(drop=True)
iaiqro.shape
iaiqro
test1 = adfuller(iaiqro['anngrowth'].dropna())
iaiqro
import pandas as pd
import yfinance as yf
import numpy as np
import statistics as st
MXX = yf.download(tickers = "^MXX", start = "2000-01-02", interval="1d")
# I select the adjusted column:
MXX = MXX['Adj Close']
MXX
lnmxx = np.log(MXX)
N = len(lnmxx)
N
phi0 = (lnmxx[-1] - lnmxx[0]) / N
sigma = np.std(lnmxx) / np.sqrt(N)
sigma
y0 = lnmxx[0]
phi1 = 1
ysimln = []
ysimln.append(y0)
for i in range(1,N):
error=np.random.normal(0,sigma)
ysimln.append(phi0 + phi1 * ysimln[i-1] + error)
ysim = pd.DataFrame(lnmxx)
ysim['ysimln'] = ysimln
ysim
import matplotlib
from matplotlib.pyplot import *
clf()
plot(ysim['Adj Close'],color = 'r')
plot(ysim['ysimln'], color = 'b')
legend(['original log IPyC','Random wok with drift'],loc = 'upper left')
show()
ysim['IPyC'] =np.exp(ysim['Adj Close'])
ysim['simIPyC'] = np.exp(ysim['ysimln'])
clf()
plot(ysim['IPyC'],color = 'r')
plot(ysim['simIPyC'], color = 'b')
legend(['original IPyC','Random wok with drift'],loc = 'upper left')
show()
import pandas as pd
iaiqro = pd.read_csv("iaiqro.csv")
iaiqro = iaiqro.sort_values(by='Periodos').reset_index(drop=True)
iaiqro.shape
iaiqro
clf()
plot(iaiqro['iaiqro'])
title('Querétaro Industrial Activity')
show()
iaiqro['logiaiqro'] = np.log(iaiqro['iaiqro'])
clf()
plot(iaiqro['logiaiqro'])
title('Log of Querétaro Industrial Activity')
show()
iaiqro['anngrowth'] = iaiqro['logiaiqro'] - iaiqro['logiaiqro'].shift(12)
clf()
plot(iaiqro['anngrowth'])
title('Annual growth of Qro industrial activity')
show()
from statsmodels.tsa.stattools import adfuller
test1 = adfuller(iaiqro['anngrowth'].dropna())
print(test1)
print(test1[0])
print(test1[1])
test1
type(test1)
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
plot_acf(iaiqro['anngrowth'], lags=12, missing='drop', zero=False)
plot_pacf(iaiqro['anngrowth'], lags=12, missing='drop',zero=False)
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
clf()
plot_acf(iaiqro['anngrowth'], lags=12, missing='drop', zero=False)
plot_pacf(iaiqro['anngrowth'], lags=12, missing='drop',zero=False)
show()
plot_acf(iaiqro['anngrowth'].dropna(), lags=12, missing='drop', zero=False)
plot_pacf(iaiqro['anngrowth'].dropna(), lags=12, missing='drop',zero=False)
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
#clf()
plot_acf(iaiqro['anngrowth'].dropna(), lags=12, missing='drop', zero=False)
plot_pacf(iaiqro['anngrowth'].dropna(), lags=12, missing='drop',zero=False)
#show()
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
#clf()
plot_acf(iaiqro['anngrowth'].dropna(), lags=12, zero=False)
plot_pacf(iaiqro['anngrowth'].dropna(), lags=12 ,zero=False)
#show()
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
clf()
plot_acf(iaiqro['anngrowth'].dropna(), lags=12, zero=False)
plot_pacf(iaiqro['anngrowth'].dropna(), lags=12 ,zero=False)
show()
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
clf()
plot_acf(iaiqro['anngrowth'].dropna(), lags=12, zero=False)
show()
clf()
plot_pacf(iaiqro['anngrowth'].dropna(), lags=12 ,zero=False)
show()
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.statespace.sarimax import SARIMAX
model1 = SARIMAX(iaiqro['logiaiqro'].dropna(), order = (1, 0, 0), seasonal_order = (0, 1, 0, 12), trend = 'c').fit()
print(model1.summary())
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.statespace.sarimax import SARIMAX
model1 = SARIMAX(iaiqro['logiaiqro'].dropna(), order = (1, 0, 0), seasonal_order = (0, 1, 0, 12), trend = 'c')
model1fit = model1.fit()
print(model1fit.summary())
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.statespace.sarimax import SARIMAX
model1 = SARIMAX(iaiqro['logiaiqro'].dropna(), order = (1, 0, 0), seasonal_order = (0, 1, 0, 12), trend = 'c')
model1fit = model1.fit()
print(model1fit.summary())
model1fit.resid
# I do not use the first 12 rows since there is no way to calculate predictions nor errors for the first 12 months since
#   I am using annual growth
errors = model1.fit.resid.iloc[12:]
clf()
plot_acf(errors, lags=12, zero = False)
show()
# I do not use the first 12 rows since there is no way to calculate predictions nor errors for the first 12 months since
#   I am using annual growth
errors = model1fit.resid.iloc[12:]
clf()
plot_acf(errors, lags=12, zero = False)
show()
model2 = SARIMAX(iaiqro['logiaiqro'].dropna(), order = (1, 0, 0), seasonal_order = (0, 1, 1, 12), trend = 'c')
model1fit = model1.fit()
print(model2fit.summary())
model2 = SARIMAX(iaiqro['logiaiqro'].dropna(), order = (1, 0, 0), seasonal_order = (0, 1, 1, 12), trend = 'c')
model2fit = model2.fit()
print(model2fit.summary())
errors = model2fit.resid.iloc[12:]
clf()
plot_acf(errors, lags=12, zero = False)
show()
predictions = model1fit.predict(start=12, end=len(iaiqro))
forecast = model1fit.forecast(12)
reticulate::repl_python()
import pandas as pd
import yfinance as yf
import numpy as np
import statistics as st
MXX = yf.download(tickers = "^MXX", start = "2000-01-02", interval="1d")
# I select the adjusted column:
MXX = MXX['Adj Close']
MXX
lnmxx = np.log(MXX)
N = len(lnmxx)
N
phi0 = (lnmxx[-1] - lnmxx[0]) / N
sigma = np.std(lnmxx) / np.sqrt(N)
sigma
y0 = lnmxx[0]
phi1 = 1
ysimln = []
ysimln.append(y0)
for i in range(1,N):
error=np.random.normal(0,sigma)
ysimln.append(phi0 + phi1 * ysimln[i-1] + error)
ysim = pd.DataFrame(lnmxx)
ysim['ysimln'] = ysimln
ysim
import matplotlib
from matplotlib.pyplot import *
clf()
plot(ysim['Adj Close'],color = 'r')
plot(ysim['ysimln'], color = 'b')
legend(['original log IPyC','Random wok with drift'],loc = 'upper left')
show()
ysim['IPyC'] =np.exp(ysim['Adj Close'])
ysim['simIPyC'] = np.exp(ysim['ysimln'])
clf()
plot(ysim['IPyC'],color = 'r')
plot(ysim['simIPyC'], color = 'b')
legend(['original IPyC','Random wok with drift'],loc = 'upper left')
show()
import pandas as pd
iaiqro = pd.read_csv("iaiqro.csv")
iaiqro = iaiqro.sort_values(by='Periodos').reset_index(drop=True)
iaiqro.shape
iaiqro
clf()
plot(iaiqro['iaiqro'])
title('Querétaro Industrial Activity')
show()
iaiqro['logiaiqro'] = np.log(iaiqro['iaiqro'])
clf()
plot(iaiqro['logiaiqro'])
title('Log of Querétaro Industrial Activity')
show()
iaiqro['anngrowth'] = iaiqro['logiaiqro'] - iaiqro['logiaiqro'].shift(12)
clf()
plot(iaiqro['anngrowth'])
title('Annual growth of Qro industrial activity')
show()
from statsmodels.tsa.stattools import adfuller
test1 = adfuller(iaiqro['anngrowth'].dropna())
# The pvalue is the second element of the tuple:
print(test1[1])
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
clf()
plot_acf(iaiqro['anngrowth'].dropna(), lags=12, zero=False)
show()
clf()
plot_pacf(iaiqro['anngrowth'].dropna(), lags=12 ,zero=False)
show()
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.statespace.sarimax import SARIMAX
model1 = SARIMAX(iaiqro['logiaiqro'].dropna(), order = (1, 0, 0), seasonal_order = (0, 1, 0, 12), trend = 'c')
model1fit = model1.fit()
print(model1fit.summary())
# I do not use the first 12 rows since there is no way to calculate predictions nor errors for the first 12 months since
#   I am using annual growth
errors = model1fit.resid.iloc[12:]
clf()
plot_acf(errors, lags=12, zero = False)
show()
model2 = SARIMAX(iaiqro['logiaiqro'].dropna(), order = (1, 0, 0), seasonal_order = (0, 1, 1, 12), trend = 'c')
model2fit = model2.fit()
print(model2fit.summary())
errors = model2fit.resid.iloc[12:]
clf()
plot_acf(errors, lags=12, zero = False)
show()
predictions = model1fit.predict(start=12, end=len(iaiqro))
forecast = model1fit.forecast(12)
forecast = model1fit.forecast(78)
type(forecast)
len(forecast)
iaiqro.head(5)
predictions = model1fit.predict(start=12, end=len(iaiqro))
# I forecast 6.5 years, from Jul 2023 to Dec 2030, which are 78 months
forecast = model1fit.forecast(78)
# I get the exponential to get forecast values in index (not in log)
predictions_iaiqro = np.exp(predictions)
forecast_iaiqro = np.exp(forecast)
clf()
plot(iaiqro[iaiqro], color= 'g')
plot(predictions_iaiqro, color='r')
plot(forecast_iaiqro, color = 'b')
legend(['Real index','Predictions of index','Forecast of index'], loc = 'lower right')
show()
predictions = model1fit.predict(start=12, end=len(iaiqro))
# I forecast 6.5 years, from Jul 2023 to Dec 2030, which are 78 months
forecast = model1fit.forecast(78)
# I get the exponential to get forecast values in index (not in log)
predictions_iaiqro = np.exp(predictions)
forecast_iaiqro = np.exp(forecast)
clf()
plot(iaiqro[iaiqro], color= 'g')
#plot(predictions_iaiqro, color='r')
plot(forecast_iaiqro, color = 'b')
legend(['Real index','Predictions of index','Forecast of index'], loc = 'lower right')
show()
iaiqro.iaiqro
predictions_iaiqro = np.exp(predictions)
forecast_iaiqro = np.exp(forecast)
View(predictions_iaiqro)
predictions = model1fit.predict(start=12, end=len(iaiqro))
# I forecast 6.5 years, from Jul 2023 to Dec 2030, which are 78 months
forecast = model1fit.forecast(78)
# I get the exponential to get forecast values in index (not in log)
predictions_iaiqro = np.exp(predictions)
forecast_iaiqro = np.exp(forecast)
clf()
plot(iaiqro['iaiqro'], color= 'g')
plot(predictions_iaiqro, color='r')
plot(forecast_iaiqro, color = 'b')
legend(['Real index','Predictions of index','Forecast of index'], loc = 'lower right')
show()
covid_shock = pd.DataFrame(0, index = np.arange(72), columns = ['covid'])
View(covid_shock)
covid_shock.head(5)
View(iaiqro)
iaiqro['month'] = iaiqro['Periods'].to_date()
View(iaiqro)
iaiqro['month'] = iaiqro['Periodos'].to_date()
iaiqro['month'] = pd.to_datetime(iaiqro['Periodos'])
iaiqro['month'] = pd.to_datetime(iaiqro['Periodos'])
iaiqro['month'] = pd.to_datetime(iaiqro["Periodos"])
type(iaiqro)
iaiqro['Periodos'] = iaiqro.Periodos.str.cat(iaiqro.Periodos,"/01")
View(iaiqro)
import pandas as pd
import yfinance as yf
import numpy as np
import statistics as st
MXX = yf.download(tickers = "^MXX", start = "2000-01-02", interval="1d")
# I select the adjusted column:
MXX = MXX['Adj Close']
MXX
lnmxx = np.log(MXX)
N = len(lnmxx)
N
phi0 = (lnmxx[-1] - lnmxx[0]) / N
sigma = np.std(lnmxx) / np.sqrt(N)
sigma
y0 = lnmxx[0]
phi1 = 1
ysimln = []
ysimln.append(y0)
for i in range(1,N):
error=np.random.normal(0,sigma)
ysimln.append(phi0 + phi1 * ysimln[i-1] + error)
ysim = pd.DataFrame(lnmxx)
ysim['ysimln'] = ysimln
ysim
import matplotlib
from matplotlib.pyplot import *
clf()
plot(ysim['Adj Close'],color = 'r')
plot(ysim['ysimln'], color = 'b')
legend(['original log IPyC','Random wok with drift'],loc = 'upper left')
show()
ysim['IPyC'] =np.exp(ysim['Adj Close'])
ysim['simIPyC'] = np.exp(ysim['ysimln'])
clf()
plot(ysim['IPyC'],color = 'r')
plot(ysim['simIPyC'], color = 'b')
legend(['original IPyC','Random wok with drift'],loc = 'upper left')
show()
import pandas as pd
iaiqro = pd.read_csv("iaiqro.csv")
iaiqro = iaiqro.sort_values(by='Periodos').reset_index(drop=True)
iaiqro.shape
iaiqro
clf()
plot(iaiqro['iaiqro'])
title('Querétaro Industrial Activity')
show()
iaiqro['logiaiqro'] = np.log(iaiqro['iaiqro'])
clf()
plot(iaiqro['logiaiqro'])
title('Log of Querétaro Industrial Activity')
show()
iaiqro['anngrowth'] = iaiqro['logiaiqro'] - iaiqro['logiaiqro'].shift(12)
clf()
plot(iaiqro['anngrowth'])
title('Annual growth of Qro industrial activity')
show()
from statsmodels.tsa.stattools import adfuller
test1 = adfuller(iaiqro['anngrowth'].dropna())
# The pvalue is the second element of the tuple:
print(test1[1])
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
clf()
plot_acf(iaiqro['anngrowth'].dropna(), lags=12, zero=False)
show()
clf()
plot_pacf(iaiqro['anngrowth'].dropna(), lags=12 ,zero=False)
show()
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.statespace.sarimax import SARIMAX
model1 = SARIMAX(iaiqro['logiaiqro'].dropna(), order = (1, 0, 0), seasonal_order = (0, 1, 0, 12), trend = 'c')
model1fit = model1.fit()
print(model1fit.summary())
# I do not use the first 12 rows since there is no way to calculate predictions nor errors for the first 12 months since
#   I am using annual growth
errors = model1fit.resid.iloc[12:]
clf()
plot_acf(errors, lags=12, zero = False)
show()
model2 = SARIMAX(iaiqro['logiaiqro'].dropna(), order = (1, 0, 0), seasonal_order = (0, 1, 1, 12), trend = 'c')
model2fit = model2.fit()
print(model2fit.summary())
errors = model2fit.resid.iloc[12:]
clf()
plot_acf(errors, lags=12, zero = False)
show()
predictions = model1fit.predict(start=12, end=len(iaiqro))
# I forecast 6.5 years, from Jul 2023 to Dec 2030, which are 78 months
forecast = model1fit.forecast(78)
# I get the exponential to get forecast values in index (not in log)
predictions_iaiqro = np.exp(predictions)
forecast_iaiqro = np.exp(forecast)
clf()
plot(iaiqro['iaiqro'], color= 'g')
plot(predictions_iaiqro, color='r')
plot(forecast_iaiqro, color = 'b')
legend(['Real index','Predictions of index','Forecast of index'], loc = 'lower right')
show()
View(MXX)
View(iaiqro)
iaiqro['Periodos'] = iaiqro.Periodos.str.cat("/01")
iaiqro['month'] = pd.concat(iaiqro.Periodos,"/01")
View(iaiqro)
iaiqro['month'] =iaiqro.Periodos.str.cat("/01")
iaiqro['month'] =iaiqro['Periodos'] + "/01"
View(iaiqro)
iaiqro['month'] = pd.to_datetime(iaiqro["month"])
type(iaiqro.month)
iaiqro.month.dtype
iaiqro.dtypes
iaiqro.month.dtypes
iaiqro['month'].dtypes
iaiqro['month'].type
iaiqro['month'].dtype
iaiqro['date'] = pd.to_datetime(iaiqro['month'])
iaiqro['date'] = pd.to_datetime(iaiqro.month)
iaiqro['date'] = pd.to_datetime(iaiqro.month,format='%Y/%M/%D')
pd.to_datetime('February 2020')
pd.to_datetime('2020/01/01')
pd.to_datetime('2020/12/01')
pd.to_datetime(iaiqro.month)
pd.to_datetime(iaiqro['month'])
x= pd.to_datetime(iaiqro['month'])
x
x= pd.to_datetime(iaiqro['month'])asdf
x=5
x= pd.to_datetime(iaiqro['month'])asdf
x= pd.to_datetimse(iaiqro['month'])asdf
x= pd.to_datetimse(iaiqro['month'])asdf
x= pd.to_datetime(iaiqro['month'])
iaiqro['date'] = pd.to_datetime(iaiqro.month,format='%Y%M%D')
iaiqro['date'] = pd.to_datetime(iaiqro.month)
iaiqro['mdate'] = pd.PeriodIndex(iaiqro.Periodos,freq="M")
iaiqro
import pandas as pd
import numpy as np
data = pd.read_csv("dataus2023.csv")
data.shape
firms = pd.read_csv("firmsus2023.csv")
firms.shape
firms.columns
# I keep only the columns I need: company code, company name, status and industry:
firms1 = firms[["empresa","Nombre","status","naics1"]]
firms1.columns=['firm','Empresa','status','industria']
# I do a left join using the panel data as the left dataset:
data = pd.merge(data, firms1, on="firm", how='left')
type(data)
type(iaiqro)
data
data.q
d
ddasdf
data['qdate'] = pd.PeriodIndex(data.q, freq="Q")
data.dtypes
data.dtypes
data.index
data.dtypes
data.index
data.set_index(['firm','qdate'], inplace=True)
